// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  username           String               @unique @db.VarChar(80)
  display_name       String               @db.VarChar(50)
  password           String               @db.VarChar(200)
  role               Role                 @default(USER)
  profile            String               @default("default") @db.VarChar(200)
  Project            Project[]
  Task               Task[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserProjects       ProjectContributer[]
  Activity           Activity[]
  UserToken          UserToken[]
  ResetPasswordToken ResetPasswordToken[]
}

model Project {
  id                 Int                  @id() @default(autoincrement())
  name               String               @db.VarChar(100)
  description        String               @db.Text()
  status             ProjectStatus        @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  owner              User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId            Int
  isPublic           Boolean              @default(true)
  Task               Task[]
  ProjectContributer ProjectContributer[]
  Activity           Activity[]

  @@unique([ownerId, name])
}

model ProjectContributer {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  joinedAt  DateTime @default(now())

  @@id([projectId, userId])
}

model Task {
  id          Int        @id() @default(autoincrement())
  title       String     @db.VarChar(200)
  description String     @db.VarChar(200)
  status      TaskStatus @default(INQUEUE)
  Project     Project    @relation(fields: [ProjectId], references: [id])
  ProjectId   Int
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  Activity    Activity[]
}

model Activity {
  id        Int      @id() @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  sumarry   String   @db.VarChar(100)
  date      DateTime @default(now())
}

model UserToken {
  int Int @id() @default(autoincrement())

  token String @unique @db.VarChar(300)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int

  createdAt DateTime @default(now())
}

model ResetPasswordToken {
  id Int @id() @default(autoincrement())

  token String @db.Uuid()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int @unique()

  createdAt DateTime @default(now())

  expireAt DateTime
}

enum TaskStatus {
  PENDING
  DONE
  INQUEUE
}

enum ProjectStatus {
  ACTIVE
  DIACTIVE
  COMPLETE
}

enum Role {
  USER
  ADMIN
  SUPER_USER
}
